POST https://localhost/api/payments
Accept: application/json
Content-Type: application/json
Authorization: bearer {{token}}

{
  "id": 1,
  "value": "1 PLN"
}

###

GET https://localhost/api/payments/bc8730dd-1dd6-4d9d-9809-04e7f7629577
Accept: application/json
Content-Type: application/json
Authorization: bearer {{token}}

###

GET https://localhost/api/payments/started?pageSize=10
Accept: application/json
Content-Type: application/json
Authorization: bearer {{token}}

###

GET http://localhost:8090/.well-known/openid-configuration

# authorization_endpoint - The authorization endpoint to which a client will redirect the user to authenticate.
# token_endpoint - The token endpoint the client will call to request an access token.
# jwks_uri - The key set endpoint a resource server will call to get the public keys it can use to validate tokens.
# introspection_endpoint - The introspection endpoint a resource server can call to validate opaque tokens.

###

GET http://localhost:8090/oauth2/authorize?response_type=code&client_id=training-client&scope=openid&redirect_uri=http://localhost:8080/oauth2/authorization/spring&code_challenge=BvLDxPL54yB0LaXR_soFXznAPL8tIEkARyONlxzE2Y4&code_challenge_method=S256

# response_type – this request parameter specifies to the authorization server that
# the client wants to use the authorization code grant type. Remember that a client might
# have configured multiple grant types. It needs to tell the authorization server which
# grant type it wants to use.
# client_id – the client identifier is like the “username” for the user. It uniquily
# identifies the client in the system.
# scope – Specifies which scope the client wants to be granted with this authentication attempt.
# redirect_uri – Specifies the URI to which the authorization server will redirect after a successful authentication. This URI must be
# one of those previously configured for the current client.
# code_challenge= - If using the authorization code enhanced with
# PKCE (discussed in chapter 13), you must provide the code challenge with the
# authorization request. When requesting the token, the client must send the verifier pair
# to prove they are the same application that initially sent this request. The PKCE flow is
# enabled by default.
# code_challenge_method – This request parameter specifies which is the hashing
# method that has been used to create the challenge from the verifier. In this case, S256
# means SHA-256 was used as a hash function.

###

POST http://localhost:8090/oauth2/token?client_id=training-client&redirect_uri=http://localhost:8080/oauth2/authorization/spring&grant_type=authorization_code&code=8DQjj0q7DOM-Zevtd0NSiLTdHW0JJuViRsuFabt2fMCcQ-pkGV8Oa6qeARk_hQf8Yf7WtUGg4S1NS3WKC9IXQkVu1bHBHIR3dji8b03SegwLVeFK15pIQ4UxjxuM4pvy&code_verifier=xBqCt3KRCLTcN12pldVWdNBzRsaUlzR1-tKgCvkKi7E
Authorization: Basic dHJhaW5pbmctY2xpZW50OnNlY3JldA==

> {%
    client.global.set('token', response.body.access_token);
%}

###

# client_id – needed to identify the client
# redirect_uri – the redirect URI through which the authorization server provided the authorization code after the successful user authentication.
# grant_type – which flow the client uses to request the access token
# code – the value of the authorization code the authorization server provided to the client
# code_verifier – the verifier based on which the challenge that the client sent at authorization was created.

### client credentials

POST http://localhost:8090/oauth2/token?grant_type=client_credentials&scope=openid
Authorization: Basic dHJhaW5pbmctY2xpZW50OnNlY3JldA==

> {%
    client.global.set('token', response.body.access_token);
%}

### opaue token validation
POST http://localhost:8090/oauth2/introspect?token=ti6isRBrvvB3sWWHwRmgQm4NTt-wghCGMU4Z_WHNDZ45ABP27xFscuXmFcKcQtduffYTjVHJ9qzsMSpRgmbpDyzkkBXQz2daLejDJczTMwKrYE2bAc8mChbBpjdLoqrp
Authorization: Basic dHJhaW5pbmctY2xpZW50OnNlY3JldA==

### token revoke

POST http://localhost:8090/oauth2/revoke?token=ti6isRBrvvB3sWWHwRmgQm4NTt-wghCGMU4Z_WHNDZ45ABP27xFscuXmFcKcQtduffYTjVHJ9qzsMSpRgmbpDyzkkBXQz2daLejDJczTMwKrYE2bAc8mChbBpjdLoqrp
Authorization: Basic dHJhaW5pbmctY2xpZW50OnNlY3JldA==
